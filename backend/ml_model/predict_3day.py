# backend/ml_model/predict_3day.py
import os
import sys
import django
from datetime import date, timedelta
import random

# --- Ensure Django settings are importable ---
# Compute backend root (one level up from this file's folder)
THIS_DIR = os.path.dirname(os.path.abspath(__file__))       # .../backend/ml_model
BACKEND_ROOT = os.path.dirname(THIS_DIR)                    # .../backend

# Put backend root on sys.path so Python can import your project package
if BACKEND_ROOT not in sys.path:
    sys.path.insert(0, BACKEND_ROOT)

# Set DJANGO_SETTINGS_MODULE to your project settings module.
# If your settings module lives at backend/forecast_project/settings.py then use 'forecast_project.settings'
# If your project package is named differently, replace 'forecast_project.settings' accordingly.
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "forecast_project.settings")

# Now safe to import and setup Django
try:
    django.setup()
except Exception as e:
    print("Failed to setup Django. Check DJANGO_SETTINGS_MODULE and project layout.")
    raise

from forecast.models import Forecast3Day  # import after django.setup()

def run_3day_forecast():
    """
    Simple 3-day forecast generator — placeholder.
    Replace ML logic with your model outputs as needed.
    """
    today = date.today()
    start = today + timedelta(days=1)  # tomorrow

    inserted = 0
    for i in range(3):
        forecast_date = start + timedelta(days=i)

        # Example predictions (replace with your model output)
        kp_val = round(random.uniform(2, 6), 2)
        a_val = int(kp_val * 3.5)
        solar_val = round(random.uniform(1, 10), 2)
        blackout = {"R1-R2": random.randint(0, 3), "R3 or greater": random.randint(0, 1)}

        # Store as the model expects: kp_index as list (or scalar), solar_radiation as list/dict, etc.
        Forecast3Day.objects.update_or_create(
            date=forecast_date,
            defaults={
                "kp_index": [kp_val],
                "a_index": a_val,
                "solar_radiation": [solar_val],
                "radio_blackout": blackout,
                "rationale_geomagnetic": "Generated by quick 3-day script",
                "rationale_radiation": "Generated by quick 3-day script",
                "rationale_blackout": "Generated by quick 3-day script",
            },
        )
        inserted += 1

    print(f"✅ Inserted/Updated {inserted} forecasts: {start} → {start + timedelta(days=2)}")

if __name__ == "__main__":
    run_3day_forecast()
